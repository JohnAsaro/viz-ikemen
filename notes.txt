
- only give reward if your guy wins, so reward 1 if win else no

- ai starts at lvl 1, which is random input, work up to lvl 4

- so I guess just learning of visual info? you CAN give it health reward shaping later but idk if that will help

- -stresstest can be used as frameskip from the command line

- important right now
    - to actually get the screen buffer properly in an efficent and cross platform way, ill have to mess with renderer.go
    (specifically intercept littearly all drawn pixels, and draw them to a numpy array, which would be possible probably and how xpilot is done)
        - maybe use glua screenshot func? (screenshot folder in config.ini)
        - in image.go theres a function called captureScreen, its whats used to encode screen captures into pngs, so maybe you can reverse engineer that
        - before making a new function in go and stuff, see if the existing screenshot function takes a screenshot even when screen is not being rendered, if not then honestly just use win32api
        - and I think the general idea of this would just be to either send this raw pixel data along a tcp port, or to just save it directly to the sqlite db.
        - I would prefer to just save it to the sqlite db to be perfectly honest, and thats probably totally fine I just have make sure the db is BEFORE the screenshot script thing is called.
        - Theres probably no need to request pixel input every frame, just make sure to clear the image db thing when its done.
        - Okay so the screenshot function does not work when tabbed out, thats okay, I can just be like "dont do that", this still seems like a good way to get this working cross platform tho.
            - So the plan for now is add another function to script.go which is just a copy of screenshot, except get rid of all the png stuff and just have it return "img" after its processsed. 
            - So that will be a lua thing, so we can have that pushed to the db every frame with done = 0 aswell as another column, then opencv renders each one at a time setting done = 1 as it goes along OR just have it delete the image from the db after its processed. 
    - other way to do it is to make 2 scripts, 1 using win32api (done) and the other using x11
    - the other other way to do it is to put everything in a docker container
    